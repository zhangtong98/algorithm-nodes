package com.zhang.leetCode.easy;

/**
 颠倒给定的 32 位无符号整数的二进制位。
 示例 1：
 输入: 00000010100101000001111010011100
 输出: 00111001011110000010100101000000
 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 示例 2：
 输入：11111111111111111111111111111101
 输出：10111111111111111111111111111111
 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 提示：
 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 进阶:
 如果多次调用这个函数，你将如何优化你的算法？
 */
public class ReverseBits {

    public static void main(String[] args) {
        System.out.println(reverseBitsV3(3));
    }

    /**
     * x = 1101
     * (1100) & x >>> 2 | (0011) & x << 2 = (0011)|(0100)= 0111
     * (1010) & x >>> 1 | (0101) & x << 1 = (0001)|(1010)= 1011
     */
    public static int reverseBitsV3(int n) {
        //((1111 1111 1111 1111 0000 0000 0000 0000&n) >>> 16)|((0000 0000 0000 0000 1111 1111 1111 1111&n) << 16) = n
        n = ((0xffff0000 & n) >>> 16) | ((0x0000ffff & n) << 16);
        //((1111 1111 0000 0000 1111 1111 0000 0000&n) >>> 8)|((0000 0000 1111 1111 0000 0000 1111 1111&n) << 8) = n
        n = ((0xff00ff00 & n) >>> 8) | ((0x00ff00ff & n) << 8);
        //((1111 0000 1111 0000 1111 0000 1111 0000&n) >>> 4)|((0000 1111 0000 1111 0000 1111 0000 1111&n) << 4) = n
        n = ((0xf0f0f0f0 & n) >>> 4) | ((0x0f0f0f0f & n) << 4);
        //((1100 1100 1100 1100 1100 1100 1100 1100&n) >>> 2)|((0011 0011 0011 0011 0011 0011 0011 0011&n) << 2) = n
        n = ((0xcccccccc & n) >>> 2) | ((0x33333333 & n) << 2);
        //((1010 1010 1010 1010 1010 1010 1010 1010&n) >>> 1)|((0101 0101 0101 0101 0101 0101 0101 0101&n) << 1) = n
        n = ((0xaaaaaaaa & n) >>> 1) | ((0x55555555 & n) << 1);
        return n;
    }

    /**
         原数字 1011 ，res = 0
         res 左移一位，res = 0，
         得到 1011 的最低位 1 加过来, res = 1
         1011 右移一位变为 101
         res = 1 左移一位，res = 10，
         得到 101 的最低位 1 加过来, res = 11
         101 右移一位变为 10
         res = 11 左移一位，res = 110，
         得到 10 的最低位 0 加过来, res = 110
         10 右移一位变为 1
         res = 110 左移一位，res = 1100，
         得到 1 的最低位 1 加过来, res = 1101
         1 右移一位变为 0, 结束
     */
    public static int reverseBitsV2(int n) {
        int res = 0;
        for (int i = 0; i < 32; i++) {
            res <<= 1;
            res |= n & 1;
            n >>= 1;
        }
        return res;
    }

    public static int reverseBits(int n) {
        StringBuilder sb = new StringBuilder(Integer.toBinaryString(n));
        if (sb.length() < 32){
            int count = 32-sb.length();
            for (int i = 0; i < count; i++) {
                sb.insert(0,'0');
            }
        }
        String s = sb.reverse().toString();
        if (s.charAt(0) == '1'){
            return (int) Long.parseLong(s,2)+1;
        }
        return Integer.parseInt(s,2);
    }
}
